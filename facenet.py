# -*- coding: utf-8 -*-
"""FaceNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18ZTtpE3YEj3IRe3g9XD98oo2dSXyQn0U
"""

from google.colab import drive
drive.mount('/content/drive')

!cp '/content/drive/MyDrive/FaceNet/facenet_keras.h5' facenet_keras.h5

!cp '/content/drive/MyDrive/FaceNet/archive.zip' archive.zip

!unzip archive.zip

# load pre-trained FaceNet model
from keras.models import load_model
facenet_model = load_model('facenet_keras.h5')
print(facenet_model.inputs)
print(facenet_model.outputs)

from os import listdir
from os.path import isdir
from PIL import Image
from numpy import asarray

def image_preprocessing(filename):
  image = Image.open(filename)
  image = image.convert('RGB')  # input color of FaceNet
  image = image.resize((160,160)) # input dimension of FaceNet
  face_arr = asarray(image)
  return face_arr

def load_marvel_face(subdir):
  face = list()
  for file in listdir(subdir):
    img_path = subdir + file
    face_arr = image_preprocessing(img_path)
    face.append(face_arr)
  return face

def load_dataset(dir):
  print("Loading the dataset...")
  X, y = list(), list()
  for subdir in listdir(dir):
    path = dir + '/' + subdir + '/'
    if not isdir(path):
      print("Image path not found...")
      continue
    marvel_face = load_marvel_face(path)
    marvel_name = [subdir for _ in range(len(marvel_face))]
    print("Loaded {} images of {}".format(len(marvel_face), subdir))
    X.extend(marvel_face)
    y.extend(marvel_name)
  print("Successfully loaded the dataset...")
  return asarray(X), asarray(y)

avengers_face, avengers_name = load_dataset('cropped_images') 
print(avengers_face.shape, avengers_name.shape)

from numpy import load, expand_dims

def face_embedding(model,face):
  face = face.astype('float32')
  mean, std = face.mean(), face.std()
  face = (face-mean)/std
  per = expand_dims(face, axis=0)
  yhat = model.predict(per)
  return yhat[0]

new_avengers = list()
for face in avengers_face:
  embed = face_embedding(model,face)
  new_avengers.append(embed)
new_avengers = asarray(new_avengers)

print(new_avengers.shape)

print(new_avengers[1])
print(avengers_name[:5])

from sklearn.preprocessing import Normalizer
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

normalize = Normalizer(norm='l2')
labeller = LabelEncoder()
new_avengers = normalize.transform(new_avengers)
avengers_name = labeller.fit_transform(avengers_name)

new_avengers[1]

train_face, test_face, train_name, test_name = train_test_split(new_avengers, avengers_name, test_size = 0.2, random_state = 3)
print(train_face.shape, train_name.shape)
print(test_face.shape, test_name.shape)

my_model = SVC(kernel = 'linear', probability = True, verbose =  True)
my_model.fit(train_face, train_name)

yhat_train = my_model.predict(train_face)
yhat_test = my_model.predict(test_face)

print(yhat_train[:5])
print(train_name[:5])

train_accuracy = accuracy_score(train_name, yhat_train)
test_accuracy = accuracy_score(test_name, yhat_test)
print("Training accuracy of the model is {0} %.".format(train_accuracy*100))
print("Testing accuracy of the model is {0} %.".format(test_accuracy*100))

